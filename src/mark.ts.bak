'use strict';
import * as vscode from 'vscode';

import { ExtPrefix } from './constants'; 

var inMarkMode: boolean = false;

export function activateMark(context: vscode.ExtensionContext): void {
    context.subscriptions.push(vscode.commands.registerCommand(ExtPrefix + '.set-mark-command', (context) => {
        if (!inMarkMode) {
            removeSelection();
            inMarkMode = false;
            return;
        }
        inMarkMode = true;
    }));

    // overrite default editor.action.clipboardPasteAction.
    context.subscriptions.push(vscode.commands.registerCommand('editor.action.clipboardPasteAction', (context) => {
        return vscode.commands.executeCommand("editor.action.clipboardCopyAction")
            .then(() => {
                if (inMarkMode) {
                    removeSelection()
                    inMarkMode = false;
                }
            });
    }));

    var supportedCursorMoves: string[] = [
        "cursorUp", "cursorDown", "cursorLeft", "cursorRight",
        "cursorHome", "cursorEnd",
        "cursorWordLeft", "cursorWordRight",
        "scrollPageDown", "scrollPageUp",
        "scrollLineDown", "scrollLineUp",
        "cursorTop", "cursorBottom",
        ];
        
     supportedCursorMoves.forEach((cursorMove) => {
        context.subscriptions.push(vscode.commands.registerCommand(ExtPrefix + "."+cursorMove,
            (context) => vscode.commands.executeCommand(inMarkMode? cursorMove+"Select": cursorMove)))
     });
}
   
export function deactivateMark(): void {
}

function removeSelection(): void {
    var currentPosition: vscode.Position = vscode.window.activeTextEditor.selection.active;
    vscode.window.activeTextEditor.selection = new vscode.Selection(currentPosition, currentPosition);
}